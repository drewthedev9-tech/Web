{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","containers/App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","email","id","react_default","a","createElement","className","alt","src","concat","CardList","robots","map","user","i","components_Card","key","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","target","value","state","_this2","fetch","then","response","json","users","_this$state","filteredRobots","filter","robot","toLowerCase","includes","length","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_containers_App","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"yNAyBeA,EAnBF,SAAAC,GAAsB,IAApBC,EAAoBD,EAApBC,KAAMC,EAAcF,EAAdE,MAAMC,EAAQH,EAARG,GAGvB,OAEIC,EAAAC,EAAAC,cAAA,OAAKC,UAAW,mDAIdH,EAAAC,EAAAC,cAAA,OAAME,IAAI,SAASC,IAAG,wBAAAC,OAA2BP,EAA3B,cACrBC,EAAAC,EAAAC,cAAA,WAEIF,EAAAC,EAAAC,cAAA,UAAKL,GACLG,EAAAC,EAAAC,cAAA,SAAIJ,MCUJS,EAvBE,SAAAX,GAAa,IAAXY,EAAWZ,EAAXY,OAIf,OACIR,EAAAC,EAAAC,cAAA,WAGKM,EAAOC,IAAI,SAACC,EAAKC,GAEd,OACAX,EAAAC,EAAAC,cAACU,EAAD,CACIC,IAAKF,EACLZ,GAAIS,EAAOG,GAAGZ,GACdF,KAAMW,EAAOG,GAAGd,KAChBC,MAAOU,EAAOG,GAAGb,YCLtBgB,EAdG,SAAAlB,GAA+BA,EAA7BmB,YAA6B,IAAjBC,EAAiBpB,EAAjBoB,aAC5B,OACIhB,EAAAC,EAAAC,cAAA,OAAKC,UAAW,OACZH,EAAAC,EAAAC,cAAA,SACAC,UAAY,mCACZc,KAAK,SACLC,YAAY,gBACZC,SAAYH,MCERI,EATD,SAACC,GACZ,OAECrB,EAAAC,EAAAC,cAAA,OAAKoB,MAAQ,CAACC,UAAW,SAAUC,OAAQ,kBAAmBC,OAAQ,UACjEJ,EAAMK,WCkDDC,qBA9CX,SAAAA,IAAe,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAJ,IAEXC,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAF,GAAAO,KAAAH,QAcRI,eAAgB,SAACC,GAEbR,EAAKS,SAAS,CAAEtB,YAAYqB,EAAME,OAAOC,SAfrCX,EAAKY,MAAQ,CACThC,OAAS,GACTO,YAAY,IALLa,mFAUC,IAAAa,EAAAV,KAChBW,MAAM,8CACLC,KAAK,SAAAC,GAAQ,OAAIA,EAASC,SAC1BF,KAAK,SAAAG,GAAK,OAAIL,EAAKJ,SAAS,CAAC7B,OAAOsC,uCAO5B,IAAAC,EAEyBhB,KAAKS,MAA5BhC,EAFFuC,EAEEvC,OAAQO,EAFVgC,EAEUhC,YACTiC,EAAiBxC,EAAOyC,OAAO,SAAAC,GACjC,OAAOA,EAAMrD,KAAKsD,cAAcC,SAASrC,EAAYoC,iBAE1D,OAAQ3C,EAAO6C,OAIVrD,EAAAC,EAAAC,cAAA,OAAKC,UAAY,MACbH,EAAAC,EAAAC,cAAA,MAAIC,UAAU,UAAd,gBACAH,EAAAC,EAAAC,cAACoD,EAAD,CAAWtC,aAAgBe,KAAKI,iBAChCnC,EAAAC,EAAAC,cAACqD,EAAD,KACIvD,EAAAC,EAAAC,cAACsD,EAAD,CAAUhD,OAAUwC,MAPnChD,EAAAC,EAAAC,cAAA,4BA5BauD,cCGEC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,iECFNC,IAASC,OAIDhE,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAC+D,EAAD,OAEFC,SAASC,eAAe,SD0G5B,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAM3B,KAAK,SAAA4B,GACjCA,EAAaC","file":"static/js/main.aaf050c6.chunk.js","sourcesContent":["\n// Need react imported we are writing JSX.\n import React from 'react';\n\n//  runs the parameters of props from React in the index.js File.\n// destructuring and putting props in the card component/function.\nconst Card = ({name, email,id}) => {  \n    // variable reffering to properties from index.js in the<div> tags\n    \n    return (\n        // CSS for the cards in short hand tachyons.\n        <div className ='tc bg-light-blue dib br3 pa3 ma3 grow shadow-10'>\n        {/* robobash template strings `` and JS expression needs ()   */}\n        {/* Robob bash is an API so to get the  random gen images may take a nit of lag */}\n        {/* Proops.id is from the index.js file  */}\n          <img  alt='robots' src= {`https://robohash.org/${id}?200x200`} />\n           <div >\n                {/* Javascript expression also this is JSX needs {} around params */}\n               <h2>{name}</h2>\n               <p>{email}</p>\n           </div>\n        </div>\n    );\n}\n\nexport default Card;","import React from 'react';\n// Card has the robots on it need to import.\nimport Card from './Card';\n\n// Name of component acting as calls is really a function\n// robots prop been ru through from the CArd component.\nconst CardList = ({robots}) =>{\n    // check loop in react app 2 video.\n    //  i for thr index that the map loop will loop through.\n    \n    return(\n        <div> \n            {/* returns the Cards array lopo from above */}\n             {/* curly brackets bcause its javascript */}\n            {robots.map((user,i) =>{\n                // key is needed when looping through an array in REACT.\n                return  (\n                <Card \n                    key={i}\n                    id={robots[i].id} \n                    name={robots[i].name} \n                    email={robots[i].email}\n                />\n                );\n            })}\n        </div>\n    );\n}\n\nexport default CardList;\n\n","import React from 'react';\n\nconst SearchBox = ({searchfield,searchChange}) =>{\n    return (\n        <div className ='pa2' >\n            <input \n            className = 'pa3 ba b--green bg-lightest-blue'\n            type='search' \n            placeholder='search robots'\n            onChange = {searchChange}\n            />\n        </div>\n\n    );\n}\n\nexport default SearchBox; ","import React from 'react';\n\nconst Scroll = (props) => {\n    return (\n        // object wih styling.\n     <div style= {{overflowY: 'scroll', border: '5px solid black', height: '800px'}}>\n         {props.children}\n     </div>\n    );\n}\n\nexport  default Scroll;","import React, {Component} from 'react';\nimport CardList from '../components/CardList.js';\nimport SearchBox from '../components/SearchBox.js'\nimport Scroll from '../components/Scroll.js'\nimport './App.css';\n\n\n\n// declaring a class the react way instead of function\nclass App extends Component {\n    constructor () {\n        // Needed for using this.\n        super()\n        this.state = {\n            robots : [], \n            searchfield:''\n        }\n}\n\n// Will get to later.SCARY.\ncomponentDidMount() {\n    fetch('https://jsonplaceholder.typicode.com/users')\n    .then(response => response.json())\n    .then(users => this.setState({robots:users}));\n}\n\nonSearchChange =(event) => {\n    // This changes the state. SetState is a mthod that comes with react.\n    this.setState({ searchfield:event.target.value})\n}\n    render (){\n        // destructured to clean code.\n        const {robots, searchfield} = this.state;\n        const filteredRobots = robots.filter(robot =>{\n            return robot.name.toLowerCase().includes(searchfield.toLowerCase());\n        })\n       return !robots.length ?\n     <h1>Loading</h1>:\n       (\n            // Components, they are reusable.\n            <div className = 'tc'>\n                <h1 className='f1 red'>Robo Friends</h1>\n                <SearchBox searchChange = {this.onSearchChange}/>\n                <Scroll>\n                    <CardList robots = {filteredRobots}/>\n                </Scroll>\n            </div>\n        )\n       }\n       \n    }\n    \n\n\n\n    \nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","\n//  Keep these at the top of the file, has webpack and browserify underhood.\nimport React from 'react';\n//  can plug and play different of libraries, like react native = for mobiles.\n// gets these liraries from react modules\nimport ReactDOM from 'react-dom';\n//  ./ means check in this currenr folder.\nimport './index.css';\nimport App  from './containers/App.js'\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n// destructing if there was more than one variable in the robot.js file.\n\n\n// Gets the reactdom package use teh render method\n// THis is where you render your Components\nReactDOM.render(\n    //  has to go into a single div to return can not have more when \n    // rendering\n    // THese are also props in here\n        <div>\n            <App/>\n        </div>\n        , document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}